// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: voltha_protos/math_service.proto

#include "voltha_protos/math_service.pb.h"
#include "voltha_protos/math_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace async_grpc {
namespace proto {

static const char* Math_method_names[] = {
  "/async_grpc.proto.Math/GetSum",
  "/async_grpc.proto.Math/GetSquare",
  "/async_grpc.proto.Math/GetRunningSum",
  "/async_grpc.proto.Math/GetEcho",
  "/async_grpc.proto.Math/GetSequence",
};

std::unique_ptr< Math::Stub> Math::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Math::Stub> stub(new Math::Stub(channel));
  return stub;
}

Math::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetSum_(Math_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetSquare_(Math_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRunningSum_(Math_method_names[2], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetEcho_(Math_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSequence_(Math_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::async_grpc::proto::GetSumRequest>* Math::Stub::GetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::async_grpc::proto::GetSumRequest>::Create(channel_.get(), rpcmethod_GetSum_, context, response);
}

::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>* Math::Stub::AsyncGetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::async_grpc::proto::GetSumRequest>::Create(channel_.get(), cq, rpcmethod_GetSum_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>* Math::Stub::PrepareAsyncGetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::async_grpc::proto::GetSumRequest>::Create(channel_.get(), cq, rpcmethod_GetSum_, context, response, false, nullptr);
}

::grpc::Status Math::Stub::GetSquare(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::async_grpc::proto::GetSquareResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSquare_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>* Math::Stub::AsyncGetSquareRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::async_grpc::proto::GetSquareResponse>::Create(channel_.get(), cq, rpcmethod_GetSquare_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>* Math::Stub::PrepareAsyncGetSquareRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::async_grpc::proto::GetSquareResponse>::Create(channel_.get(), cq, rpcmethod_GetSquare_, context, request, false);
}

::grpc::ClientReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* Math::Stub::GetRunningSumRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>::Create(channel_.get(), rpcmethod_GetRunningSum_, context);
}

::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* Math::Stub::AsyncGetRunningSumRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>::Create(channel_.get(), cq, rpcmethod_GetRunningSum_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* Math::Stub::PrepareAsyncGetRunningSumRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>::Create(channel_.get(), cq, rpcmethod_GetRunningSum_, context, false, nullptr);
}

::grpc::Status Math::Stub::GetEcho(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::async_grpc::proto::GetEchoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEcho_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>* Math::Stub::AsyncGetEchoRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::async_grpc::proto::GetEchoResponse>::Create(channel_.get(), cq, rpcmethod_GetEcho_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>* Math::Stub::PrepareAsyncGetEchoRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::async_grpc::proto::GetEchoResponse>::Create(channel_.get(), cq, rpcmethod_GetEcho_, context, request, false);
}

::grpc::ClientReader< ::async_grpc::proto::GetSequenceResponse>* Math::Stub::GetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::async_grpc::proto::GetSequenceResponse>::Create(channel_.get(), rpcmethod_GetSequence_, context, request);
}

::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>* Math::Stub::AsyncGetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::async_grpc::proto::GetSequenceResponse>::Create(channel_.get(), cq, rpcmethod_GetSequence_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>* Math::Stub::PrepareAsyncGetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::async_grpc::proto::GetSequenceResponse>::Create(channel_.get(), cq, rpcmethod_GetSequence_, context, request, false, nullptr);
}

Math::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Math_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Math::Service, ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>(
          std::mem_fn(&Math::Service::GetSum), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Math_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Math::Service, ::async_grpc::proto::GetSquareRequest, ::async_grpc::proto::GetSquareResponse>(
          std::mem_fn(&Math::Service::GetSquare), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Math_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Math::Service, ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>(
          std::mem_fn(&Math::Service::GetRunningSum), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Math_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Math::Service, ::async_grpc::proto::GetEchoRequest, ::async_grpc::proto::GetEchoResponse>(
          std::mem_fn(&Math::Service::GetEcho), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Math_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Math::Service, ::async_grpc::proto::GetSequenceRequest, ::async_grpc::proto::GetSequenceResponse>(
          std::mem_fn(&Math::Service::GetSequence), this)));
}

Math::Service::~Service() {
}

::grpc::Status Math::Service::GetSum(::grpc::ServerContext* context, ::grpc::ServerReader< ::async_grpc::proto::GetSumRequest>* reader, ::async_grpc::proto::GetSumResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Math::Service::GetSquare(::grpc::ServerContext* context, const ::async_grpc::proto::GetSquareRequest* request, ::async_grpc::proto::GetSquareResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Math::Service::GetRunningSum(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::async_grpc::proto::GetSumResponse, ::async_grpc::proto::GetSumRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Math::Service::GetEcho(::grpc::ServerContext* context, const ::async_grpc::proto::GetEchoRequest* request, ::async_grpc::proto::GetEchoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Math::Service::GetSequence(::grpc::ServerContext* context, const ::async_grpc::proto::GetSequenceRequest* request, ::grpc::ServerWriter< ::async_grpc::proto::GetSequenceResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace async_grpc
}  // namespace proto

