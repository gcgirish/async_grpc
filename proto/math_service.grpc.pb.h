// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: voltha_protos/math_service.proto
// Original file comments:
// Copyright 2017 The Cartographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_voltha_5fprotos_2fmath_5fservice_2eproto__INCLUDED
#define GRPC_voltha_5fprotos_2fmath_5fservice_2eproto__INCLUDED

#include "proto/math_service.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace async_grpc {
namespace proto {

// Provides information about the gRPC server.
class Math final {
 public:
  static constexpr char const* service_full_name() {
    return "async_grpc.proto.Math";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::async_grpc::proto::GetSumRequest>> GetSum(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::async_grpc::proto::GetSumRequest>>(GetSumRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::async_grpc::proto::GetSumRequest>> AsyncGetSum(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::async_grpc::proto::GetSumRequest>>(AsyncGetSumRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::async_grpc::proto::GetSumRequest>> PrepareAsyncGetSum(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::async_grpc::proto::GetSumRequest>>(PrepareAsyncGetSumRaw(context, response, cq));
    }
    virtual ::grpc::Status GetSquare(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::async_grpc::proto::GetSquareResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetSquareResponse>> AsyncGetSquare(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetSquareResponse>>(AsyncGetSquareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetSquareResponse>> PrepareAsyncGetSquare(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetSquareResponse>>(PrepareAsyncGetSquareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>> GetRunningSum(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>>(GetRunningSumRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>> AsyncGetRunningSum(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>>(AsyncGetRunningSumRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>> PrepareAsyncGetRunningSum(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>>(PrepareAsyncGetRunningSumRaw(context, cq));
    }
    virtual ::grpc::Status GetEcho(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::async_grpc::proto::GetEchoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetEchoResponse>> AsyncGetEcho(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetEchoResponse>>(AsyncGetEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetEchoResponse>> PrepareAsyncGetEcho(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetEchoResponse>>(PrepareAsyncGetEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::async_grpc::proto::GetSequenceResponse>> GetSequence(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::async_grpc::proto::GetSequenceResponse>>(GetSequenceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::async_grpc::proto::GetSequenceResponse>> AsyncGetSequence(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::async_grpc::proto::GetSequenceResponse>>(AsyncGetSequenceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::async_grpc::proto::GetSequenceResponse>> PrepareAsyncGetSequence(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::async_grpc::proto::GetSequenceResponse>>(PrepareAsyncGetSequenceRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientWriterInterface< ::async_grpc::proto::GetSumRequest>* GetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::async_grpc::proto::GetSumRequest>* AsyncGetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::async_grpc::proto::GetSumRequest>* PrepareAsyncGetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetSquareResponse>* AsyncGetSquareRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetSquareResponse>* PrepareAsyncGetSquareRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* GetRunningSumRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* AsyncGetRunningSumRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* PrepareAsyncGetRunningSumRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetEchoResponse>* AsyncGetEchoRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::async_grpc::proto::GetEchoResponse>* PrepareAsyncGetEchoRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::async_grpc::proto::GetSequenceResponse>* GetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::async_grpc::proto::GetSequenceResponse>* AsyncGetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::async_grpc::proto::GetSequenceResponse>* PrepareAsyncGetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::async_grpc::proto::GetSumRequest>> GetSum(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::async_grpc::proto::GetSumRequest>>(GetSumRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>> AsyncGetSum(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>>(AsyncGetSumRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>> PrepareAsyncGetSum(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>>(PrepareAsyncGetSumRaw(context, response, cq));
    }
    ::grpc::Status GetSquare(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::async_grpc::proto::GetSquareResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>> AsyncGetSquare(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>>(AsyncGetSquareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>> PrepareAsyncGetSquare(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>>(PrepareAsyncGetSquareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>> GetRunningSum(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>>(GetRunningSumRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>> AsyncGetRunningSum(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>>(AsyncGetRunningSumRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>> PrepareAsyncGetRunningSum(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>>(PrepareAsyncGetRunningSumRaw(context, cq));
    }
    ::grpc::Status GetEcho(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::async_grpc::proto::GetEchoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>> AsyncGetEcho(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>>(AsyncGetEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>> PrepareAsyncGetEcho(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>>(PrepareAsyncGetEchoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::async_grpc::proto::GetSequenceResponse>> GetSequence(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::async_grpc::proto::GetSequenceResponse>>(GetSequenceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>> AsyncGetSequence(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>>(AsyncGetSequenceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>> PrepareAsyncGetSequence(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>>(PrepareAsyncGetSequenceRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientWriter< ::async_grpc::proto::GetSumRequest>* GetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response) override;
    ::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>* AsyncGetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::async_grpc::proto::GetSumRequest>* PrepareAsyncGetSumRaw(::grpc::ClientContext* context, ::async_grpc::proto::GetSumResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>* AsyncGetSquareRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetSquareResponse>* PrepareAsyncGetSquareRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSquareRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* GetRunningSumRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* AsyncGetRunningSumRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::async_grpc::proto::GetSumRequest, ::async_grpc::proto::GetSumResponse>* PrepareAsyncGetRunningSumRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>* AsyncGetEchoRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::async_grpc::proto::GetEchoResponse>* PrepareAsyncGetEchoRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetEchoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::async_grpc::proto::GetSequenceResponse>* GetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request) override;
    ::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>* AsyncGetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::async_grpc::proto::GetSequenceResponse>* PrepareAsyncGetSequenceRaw(::grpc::ClientContext* context, const ::async_grpc::proto::GetSequenceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSquare_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRunningSum_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEcho_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSequence_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSum(::grpc::ServerContext* context, ::grpc::ServerReader< ::async_grpc::proto::GetSumRequest>* reader, ::async_grpc::proto::GetSumResponse* response);
    virtual ::grpc::Status GetSquare(::grpc::ServerContext* context, const ::async_grpc::proto::GetSquareRequest* request, ::async_grpc::proto::GetSquareResponse* response);
    virtual ::grpc::Status GetRunningSum(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::async_grpc::proto::GetSumResponse, ::async_grpc::proto::GetSumRequest>* stream);
    virtual ::grpc::Status GetEcho(::grpc::ServerContext* context, const ::async_grpc::proto::GetEchoRequest* request, ::async_grpc::proto::GetEchoResponse* response);
    virtual ::grpc::Status GetSequence(::grpc::ServerContext* context, const ::async_grpc::proto::GetSequenceRequest* request, ::grpc::ServerWriter< ::async_grpc::proto::GetSequenceResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSum() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSum(::grpc::ServerContext* context, ::grpc::ServerReader< ::async_grpc::proto::GetSumRequest>* reader, ::async_grpc::proto::GetSumResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSum(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::async_grpc::proto::GetSumResponse, ::async_grpc::proto::GetSumRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSquare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSquare() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSquare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSquare(::grpc::ServerContext* context, const ::async_grpc::proto::GetSquareRequest* request, ::async_grpc::proto::GetSquareResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSquare(::grpc::ServerContext* context, ::async_grpc::proto::GetSquareRequest* request, ::grpc::ServerAsyncResponseWriter< ::async_grpc::proto::GetSquareResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRunningSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetRunningSum() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRunningSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunningSum(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::async_grpc::proto::GetSumResponse, ::async_grpc::proto::GetSumRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRunningSum(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::async_grpc::proto::GetSumResponse, ::async_grpc::proto::GetSumRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(2, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetEcho() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEcho(::grpc::ServerContext* context, const ::async_grpc::proto::GetEchoRequest* request, ::async_grpc::proto::GetEchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEcho(::grpc::ServerContext* context, ::async_grpc::proto::GetEchoRequest* request, ::grpc::ServerAsyncResponseWriter< ::async_grpc::proto::GetEchoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetSequence() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSequence(::grpc::ServerContext* context, const ::async_grpc::proto::GetSequenceRequest* request, ::grpc::ServerWriter< ::async_grpc::proto::GetSequenceResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSequence(::grpc::ServerContext* context, ::async_grpc::proto::GetSequenceRequest* request, ::grpc::ServerAsyncWriter< ::async_grpc::proto::GetSequenceResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSum<WithAsyncMethod_GetSquare<WithAsyncMethod_GetRunningSum<WithAsyncMethod_GetEcho<WithAsyncMethod_GetSequence<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GetSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSum() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSum(::grpc::ServerContext* context, ::grpc::ServerReader< ::async_grpc::proto::GetSumRequest>* reader, ::async_grpc::proto::GetSumResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSquare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSquare() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSquare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSquare(::grpc::ServerContext* context, const ::async_grpc::proto::GetSquareRequest* request, ::async_grpc::proto::GetSquareResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRunningSum : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetRunningSum() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRunningSum() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRunningSum(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::async_grpc::proto::GetSumResponse, ::async_grpc::proto::GetSumRequest>* stream) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetEcho() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEcho(::grpc::ServerContext* context, const ::async_grpc::proto::GetEchoRequest* request, ::async_grpc::proto::GetEchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetSequence() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSequence(::grpc::ServerContext* context, const ::async_grpc::proto::GetSequenceRequest* request, ::grpc::ServerWriter< ::async_grpc::proto::GetSequenceResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSquare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetSquare() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::async_grpc::proto::GetSquareRequest, ::async_grpc::proto::GetSquareResponse>(std::bind(&WithStreamedUnaryMethod_GetSquare<BaseClass>::StreamedGetSquare, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetSquare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSquare(::grpc::ServerContext* context, const ::async_grpc::proto::GetSquareRequest* request, ::async_grpc::proto::GetSquareResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSquare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::async_grpc::proto::GetSquareRequest,::async_grpc::proto::GetSquareResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEcho : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetEcho() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::async_grpc::proto::GetEchoRequest, ::async_grpc::proto::GetEchoResponse>(std::bind(&WithStreamedUnaryMethod_GetEcho<BaseClass>::StreamedGetEcho, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetEcho() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEcho(::grpc::ServerContext* context, const ::async_grpc::proto::GetEchoRequest* request, ::async_grpc::proto::GetEchoResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEcho(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::async_grpc::proto::GetEchoRequest,::async_grpc::proto::GetEchoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSquare<WithStreamedUnaryMethod_GetEcho<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetSequence : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetSequence() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::async_grpc::proto::GetSequenceRequest, ::async_grpc::proto::GetSequenceResponse>(std::bind(&WithSplitStreamingMethod_GetSequence<BaseClass>::StreamedGetSequence, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetSequence() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSequence(::grpc::ServerContext* context, const ::async_grpc::proto::GetSequenceRequest* request, ::grpc::ServerWriter< ::async_grpc::proto::GetSequenceResponse>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetSequence(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::async_grpc::proto::GetSequenceRequest,::async_grpc::proto::GetSequenceResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetSequence<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSquare<WithStreamedUnaryMethod_GetEcho<WithSplitStreamingMethod_GetSequence<Service > > > StreamedService;
};

}  // namespace proto
}  // namespace async_grpc


#endif  // GRPC_voltha_5fprotos_2fmath_5fservice_2eproto__INCLUDED
